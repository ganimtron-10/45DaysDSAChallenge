// https://www.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
public:
    // Function to detect cycle in a directed graph.
    bool dfs(int n, vector<int> adj[], vector<int> &visited, vector<int> &pathVisited)
    {

        visited[n] = 1;
        pathVisited[n] = 1;

        for (auto child : adj[n])
        {
            if (not visited[child])
            {
                if (dfs(child, adj, visited, pathVisited))
                    return true;
            }
            else if (pathVisited[child])
            {
                return true;
            }
        }

        pathVisited[n] = 0;
        return false;
    }

    bool isCyclic(int V, vector<int> adj[])
    {
        // code here
        vector<int> visited(V, 0), pathVisited(V, 0);
        for (int i = 0; i < V; i++)
        {
            if (dfs(i, adj, visited, pathVisited))
                return true;
        }
        return false;
    }
};

//{ Driver Code Starts.

int main()
{

    int t;
    cin >> t;
    while (t--)
    {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++)
        {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

// } Driver Code Ends