// https://leetcode.com/problems/number-of-operations-to-make-network-connected/

func dfs(i int, g [][]int, visited *[]bool){
    (*visited)[i] = true

    for _,child := range g[i] {
        if !(*visited)[child] {
            dfs(child, g, visited)
        }
    }
}

func makeConnected(n int, connections [][]int) int {
    if len(connections) < n-1 {
        return -1
    }

    graph := make([][]int, n)
    for i := 0; i < len(connections); i++ {
        u, v := connections[i][0], connections[i][1]
        graph[u] = append(graph[u],v)
        graph[v] = append(graph[v],u)
    }

    // fmt.Println(graph)

    var visited = make([]bool, n)
    cnt := 0
    for i := 0; i < n; i++ {
        if !visited[i] {
            dfs(i, graph, &visited)
            cnt++
        }
    }

    return cnt - 1;
}